/***************************************************************************//**
 *  @file   SampleParticle.cpp
 *  @brief  Implementation for the SampleParticle class.
 *
 *  @date   2014-10-14T01:43:09
 *  @autor  generated by ParticleToCode script.
 *          ParticleToCode written by Mitsu(https://github.com/mitsuaki-n).
 ******************************************************************************/
#include "./SampleParticle.hpp"

#include <string>
#include "cocos2d.h"

using namespace cocos2d;

bool Sample::Effects::SampleParticle::initWithTotalParticles(int number_of_particles)
{
    if(!CCParticleSystemQuad::initWithTotalParticles(2000.0))
        return false;

    //-------------------------------------------
    // Set Parameters.
    // Emitter name in particle designer 2.0
    this->_configName = "SampleParticle";

    // Angle
    this->_angle    = 360.0f;
    this->_angleVar = 360.0f;

    // Duration
    this->_duration = -1.0f;

    // Blend Function
    this->_blendFunc.src = 775;
    this->_blendFunc.dst = 1;

    // Color
    this->_startColor.r     = 0.549209117889f;
    this->_startColor.g     = 0.68649494648f;
    this->_startColor.b     = 0.618790149689f;
    this->_startColor.a     = 0.639999985695f;
    this->_startColorVar.r  = 0.9f;
    this->_startColorVar.g  = 1.0f;
    this->_startColorVar.b  = 0.68f;
    this->_startColorVar.a  = 0.78f;
    this->_endColor.r       = 0.842717170715f;
    this->_endColor.g       = 0.921008169651f;
    this->_endColor.b       = 0.104345373809f;
    this->_endColor.a       = 0.839999973774f;
    this->_endColorVar.r    = 0.42f;
    this->_endColorVar.g    = 0.98f;
    this->_endColorVar.b    = 0.98f;
    this->_endColorVar.a    = 0.74f;

    // Particle Size
    this->_startSize    = 3.37f;
    this->_startSizeVar = 64.0f;
    this->_endSize      = 30.32f;
    this->_endSizeVar   = 10.11f;

    // Position
    this->setPosition(Vec2(0.0f, 0.0f));
    this->_posVar.x = 7.0f;
    this->_posVar.y = 7.0f;

    // Spinning
    this->_startSpin    = -47.37f;
    this->_startSpinVar = -47.37f;
    this->_endSpin      = -47.37f;
    this->_endSpinVar   = -142.11f;

    // Emitter Mode
    
    //-------------------------------------------
    // Emitter Mode
    this->_emitterMode              = cocos2d::ParticleSystem::Mode::GRAVITY;
    this->modeA.gravity.x           = 0.0;
    this->modeA.gravity.y           = 0.0;
    this->modeA.speed               = 250.0;
    this->modeA.speedVar            = 400.0;
    this->modeA.radialAccel         = -400.0;
    this->modeA.radialAccelVar      = 200.0;
    this->modeA.tangentialAccel     = -100.0;
    this->modeA.tangentialAccelVar  = 50.0;
    this->modeA.rotationIsDir       = false;


    // Life Span
    this->_life     = 0.4605f;
    this->_lifeVar  = 1.3816f;

    // Emission Rate
    this->_emissionRate = this->_totalParticles / this->_life;

    // Don't get the internal texture if a batchNode is used.
    if(this->_batchNode)
        return true;

    //-------------------------------------------
    // Load Texture.
    bool result = false;
    unsigned char *buffer = nullptr;
    unsigned char *deflated = nullptr;
    Image *image = nullptr;

    do {
        // Set a compatible default for the alpha transfer.
        this->_opacityModifyRGB = false;

        // Texture: Try to get the texture from the cache.
        std::string dir_name = "";
        std::string tex_name = "SampleParticle.png";
        std::size_t r_pos = tex_name.rfind('/');

        if(r_pos != std::string::npos) {
            std::string tex_dir = tex_name.substr(0, r_pos + 1);
            if(!dir_name.empty() && tex_dir != dir_name) {
                tex_name = tex_name.substr(r_pos + 1);
                tex_name = dir_name + tex_name;
            }
        } else if(!dir_name.empty() && !tex_name.empty()) {
            tex_name = dir_name + tex_name;
        }

        Texture2D *tex = nullptr;
        if(tex_name.length() > 0) {
            // Set not pop-up message box when load image failed.
            bool notify = FileUtils::getInstance()->isPopupNotify();
            FileUtils::getInstance()->setPopupNotify(false);
            tex = Director::getInstance()->getTextureCache()->addImage(tex_name);
            // reset the value of UIImage notify
            FileUtils::getInstance()->setPopupNotify(notify);
        }

        if(tex) {
            this->setTexture(tex);
        } else {
            std::string tex_data = "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";
            CCASSERT(!tex_data.empty(), "SampleParticle: TextureData is empty!");

            std::size_t data_len = tex_data.size();
            CCASSERT(data_len != 0, "SampleParticle: TextureData is empty!");

            // if it fails, try to get it from the base64-gzipped data.
            int decode_len = base64Decode(
                reinterpret_cast<const unsigned char*>(tex_data.c_str()),
                static_cast<unsigned int>(data_len), &buffer);
            if(!buffer) break;

            ssize_t deflated_len =
                    ZipUtils::inflateMemory(buffer, decode_len, &deflated);
            if(!deflated) break;

            // For android, we should retain it in -
            // VolatileTexture::addImage which invoked in -
            // Director::getInstance()->getTextureCache()->addUIImage().
            image = new Image();
            if(!image) break;
            bool is_ok = image->initWithImageData(deflated, deflated_len);
            if(!is_ok) break;
            this->setTexture(
                Director::getInstance()->getTextureCache()->addImage(
                    image, tex_name.c_str()));
            image->release();
        }

        this->_yCoordFlipped = 1;
        if(!this->_texture)
            CCLOGWARN("cocos2d: Warning: SampleParticle without a texture");

        result = true;
    } while(false);
    free(buffer);   buffer = nullptr;
    free(deflated); deflated = nullptr;
    CC_SAFE_DELETE(image);
    return result;
}

