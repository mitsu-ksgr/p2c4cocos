/***************************************************************************//**
 *  @file   {FileName}
 *  @brief  Implementation for the {ClassName} class.
 *
 *  @date   {GenerateTime}
 *  @autor  generated by {ScriptName} script.
 *          {ScriptName} written by Mitsu(https://github.com/mitsuaki-n).
 ******************************************************************************/
#include "{IncludeHeader}"

#include <string>
#include "cocos2d.h"

using namespace cocos2d;

bool {Namespace}{ClassName}::initWithTotalParticles(int number_of_particles)
{{
    if(!CCParticleSystemQuad::initWithTotalParticles({TotalParticles}))
        return false;

    //-------------------------------------------
    // Set Parameters.
    // Emitter name in particle designer 2.0
    this->_configName = "{ConfigName}";

    // Angle
    this->_angle    = {Angle};
    this->_angleVar = {AngleVariance};

    // Duration
    this->_duration = {Duration};

    // Blend Function
    this->_blendFunc.src = {BlendFuncSource};
    this->_blendFunc.dst = {BlendFuncDestination};

    // Color
    this->_startColor.r     = {StartColorRed};
    this->_startColor.g     = {StartColorGreen};
    this->_startColor.b     = {StartColorBlue};
    this->_startColor.a     = {StartColorAlpha};
    this->_startColorVar.r  = {StartColorVarianceRed};
    this->_startColorVar.g  = {StartColorVarianceGreen};
    this->_startColorVar.b  = {StartColorVarianceBlue};
    this->_startColorVar.a  = {StartColorVarianceAlpha};
    this->_endColor.r       = {FinishColorRed};
    this->_endColor.g       = {FinishColorGreen};
    this->_endColor.b       = {FinishColorBlue};
    this->_endColor.a       = {FinishColorAlpha};
    this->_endColorVar.r    = {FinishColorVarianceRed};
    this->_endColorVar.g    = {FinishColorVarianceGreen};
    this->_endColorVar.b    = {FinishColorVarianceBlue};
    this->_endColorVar.a    = {FinishColorVarianceAlpha};

    // Particle Size
    this->_startSize    = {StartParticleSize};
    this->_startSizeVar = {StartParticleSizeVariance};
    this->_endSize      = {FinishParticleSize};
    this->_endSizeVar   = {FinishParticleSizeVariance};

    // Position
    this->setPosition(Vec2({SourcePositionX}, {SourcePositionY}));
    this->_posVar.x = {SourcePositionVarianceX};
    this->_posVar.y = {SourcePositionVarianceY};

    // Spinning
    this->_startSpin    = {RotationStart};
    this->_startSpinVar = {RotationStartVariance};
    this->_endSpin      = {RotationEnd};
    this->_endSpinVar   = {RotationEndVariance};

    // Emitter Mode
    {EmitterConfigCodes}

    // Life Span
    this->_life     = {ParticleLifespan};
    this->_lifeVar  = {ParticleLifespanVariance};

    // Emission Rate
    this->_emissionRate = this->_totalParticles / this->_life;

    // Don't get the internal texture if a batchNode is used.
    if(this->_batchNode)
        return true;

    //-------------------------------------------
    // Load Texture.
    bool result = false;
    unsigned char *buffer = nullptr;
    unsigned char *deflated = nullptr;

    do {{
        // Set a compatible default for the alpha transfer.
        this->_opacityModifyRGB = false;

        // Texture: Try to get the texture from the cache.
        std::string dir_name = "{TextureDirectoryPath}";
        std::string tex_name = "{TextureFileName}";
        std::size_t r_pos = tex_name.rfind('/');

        if(r_pos != std::string::npos) {{
            std::string tex_dir = tex_name.substr(0, r_pos + 1);
            if(!dir_name.empty() && tex_dir != dir_name) {{
                tex_name = tex_name.substr(r_pos + 1);
                tex_name = dir_name + tex_name;
            }}
        }} else if(!dir_name.empty() && !tex_name.empty()) {{
            tex_name = dir_name + tex_name;
        }}

        Texture2D *tex = nullptr;
        if(tex_name.length() > 0) {{
            // Set not pop-up message box when load image failed.
            bool notify = FileUtils::getInstance()->isPopupNotify();
            FileUtils::getInstance()->setPopupNotify(false);
            tex = Director::getInstance()->getTextureCache()->addImage(tex_name);
            // reset the value of UIImage notify
            FileUtils::getInstance()->setPopupNotify(notify);
        }}

        if(tex) {{
            this->setTexture(tex);
        }} else {{
            std::string tex_data = "{TextureData}";
            CCASSERT(!tex_data.empty(), "{ClassName}: TextureData is empty!");

            std::size_t data_len = tex_data.size();
            CCASSERT(data_len != 0, "{ClassName}: TextureData is empty!");

            // if it fails, try to get it from the base64-gzipped data.
            int decode_len = base64Decode(
                reinterpret_cast<const unsigned char*>(tex_data.c_str()),
                static_cast<unsigned int>(data_len), &buffer);
            if(!buffer) break;

            ssize_t deflated_len =
                    ZipUtils::inflateMemory(buffer, decode_len, &deflated);
            if(!deflated) break;

            // For android, we should retain it in -
            // VolatileTexture::addImage which invoked in -
            // Director::getInstance()->getTextureCache()->addUIImage().
            Image *image = new Image();
            if(!image) break;
            bool is_ok = image->initWithImageData(deflated, deflated_len);
            if(!is_ok) break;
            this->setTexture(
                Director::getInstance()->getTextureCache()->addImage(
                    image, tex_name.c_str()));
            delete image; image = nullptr;
        }}

        this->_yCoordFlipped = {YCoordFlipped};
        if(!this->_texture)
            CCLOGWARN("cocos2d: Warning: {ClassName} without a texture");

        result = true;
    }} while(false);
    free(buffer);   buffer = nullptr;
    free(deflated); deflated = nullptr;

    return result;
}}

